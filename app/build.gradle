apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "org.tomahawk.deezerplugin"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 20
        versionName "0.20"
    }

    /*
     * Tries to get the version name from the latest Git tag
     */
    def getNewVersionName = { ->
        try {
            boolean isChanged = 'git diff --cached'.execute([], projectDir).text.length() > 0 ||
                    'git diff'.execute([], projectDir).text.length() > 0
            return 'git describe --tags'.execute([], projectDir).text.replace('\n', '') +
                    (isChanged ? "_modified" : "")
        }
        catch (IOException e) {
            logger.error("Wasn't able to get version tag: " + e.getMessage());
            return defaultConfig.versionName + "_nogit"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.
                        replace(".apk", "-" + getNewVersionName() + ".apk")
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
        variant.buildConfigField "String", "APP_ID", "\"" + getAppId() + "\""
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles "../proguard-rules.pro"
        }
        debug {
            versionNameSuffix "_debug"
            zipAlignEnabled true
        }
    }

    productFlavors {
        x86 {
            ndk {
                abiFilter "x86"
            }
            versionName getNewVersionName() + "_x86"
            versionCode Integer.parseInt("6$defaultConfig.versionCode")
        }
        armv7a {
            ndk {
                abiFilter "armeabi-v7a"
            }
            versionName getNewVersionName() + "_armv7a"
            versionCode Integer.parseInt("2$defaultConfig.versionCode")
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
            versionName getNewVersionName() + "_arm"
            versionCode Integer.parseInt("1$defaultConfig.versionCode")
        }
    }
}

def getAppId() {
    def Properties props = new Properties()
    def propFile = file('secrets.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        return props['APP_ID']
    }
}

def Properties props = new Properties()
def propFile = file('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        android.buildTypes.release.signingConfig = android.signingConfigs.release
        android.buildTypes.debug.signingConfig = android.signingConfigs.release
    }
}

dependencies {
    compile files("src/main/libs/deezer-sdk-0.10.16.jar")
    compile("ch.acra:acra:4.6.2") {
        transitive = false
    }
}
