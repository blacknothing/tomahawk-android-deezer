apply plugin: 'com.android.application'

repositories {
    flatDir {
        dirs 'libs'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getNewVersionName = { ->
    boolean isChanged = 'git diff --cached'.execute().text.length() > 0 ||
            'git diff'.execute().text.length() > 0
    return 'git describe --tags'.execute().text.replace('\n', '') + (isChanged ? "_modified" : "")
}

dependencies {
    compile files("src/main/libs/deezer-sdk-0.10.16.jar")
    compile("ch.acra:acra:4.6.2") {
        transitive = false
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "org.tomahawk.deezerplugin"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 10
        versionName "0.10"
    }

    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile new File(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFile 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            versionNameSuffix "_debug"
            zipAlignEnabled true
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }

    productFlavors {
        x86 {
            ndk {
                abiFilter "x86"
            }
            versionName getNewVersionName() + "_x86"
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
        }
        armv7a {
            ndk {
                abiFilter "armeabi-v7a"
            }
            versionName getNewVersionName() + "_armv7a"
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
            versionName getNewVersionName() + "_arm"
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
        }
    }
}

/*
 * Include the file "signingconfig.gradle" (which defines the signingConfig), if it exists
 * Example of the contents of such "signingconfig.gradle":
 *
 * android {
 *    signingConfigs {
 *       release {
 *           storeFile file("key.keystore")
 *           storePassword "password"
 *           keyAlias "alias"
 *           keyPassword "password"
 *       }
 *    }
 *
 *    buildTypes {
 *       release {
 *           signingConfig signingConfigs.release
 *       }
 *    }
 * }
 *
 */
if (new File("signingconfig.gradle").exists()) {
    apply from: "signingconfig.gradle";
}
